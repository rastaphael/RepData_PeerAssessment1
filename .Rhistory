d <-read.csv("/home/raphael/Documents/coursera/f.csv", sep=";",na.strings = "?", )
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Time<-strptime(d$Time, "%H:%M:%S")
# convert names to lower case
names(d) <- tolower(names(d))
# remove underscores
names(d) <- gsub("_","",names(d))
# subset 1st and 2nd of february 2007
dfeb<-(subset(d, d$date=="2007-01-02" | d$date=="2007-02-02"  ))
start = as.POSIXct(strftime("2007-02-01 00:00:00"))
end = as.POSIXct(strftime("2007-02-03 00:00:00"))
with (plot ( time, globalactivepower, xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n"), data=dfeb)
axis.POSIXct(1, at=seq(start, end, by="day"), format="%a")
data<-df
data<-dfeb
startDay = as.POSIXct(strftime("2007-02-01 00:00:00"))
endDay = as.POSIXct(strftime("2007-02-03 00:00:00"))
plot(data$Time,
data$Global_active_power,
xlim=c(startDay, endDay),
xaxt="n",
type="l",
xlab="",
ylab="Global Active Power (kilowatts)"
)
axis.POSIXct(1, at=seq(startDay, endDay, by="day"), format="%a")
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
df<-read.csv("activity.csv")
library(ggplot2)
totalnofsteps <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
qplot(totalnofsteps, xlab = "Total number of steps taken each day", binwidth=500)
mean(totalnofsteps, na.rm=TRUE)
median(totalnofsteps, na.rm=TRUE)
mean(totalnofsteps, na.rm=TRUE)
median(totalnofsteps, na.rm=TRUE)
ag<-aggregate(x=list(steps=df$steps),by=list(interval=df$interval),FUN=mean,na.rm=TRUE)
ggplot(data=ag, aes(x = interval, y = steps))+geom_line()
ag[which.max( ag$steps),1]
sum(!complete.cases(df))
ag
head (ag)
df
head (df)
dfnoNA <- df
replace
?replace
df[is.na(df$steps)]
df[is.na(df$steps),]
head (ag)
dfnoNAs <- df
for (r in 1:nrow(df)){
if ( is.na(df$steps[r])) {
interval <- df$interval[r]
meanForInterval <- ag$steps[ag$interval == interval]
dfnoNA$steps[r] <- meanForInterval
}
}
sum(is.na(dfnoNA$steps))
sum(is.na(df$steps))
sum(is.na(df$steps))
totalnofsteps <- tapply(dfnoNA$steps, dfnoNA$date, FUN = sum, na.rm = TRUE)
qplot(totalnofsteps, xlab = "Total number of steps taken each day", binwidth=500)
qplot(totalnofsteps, xlab = "Total number of steps taken each day", binwidth=1000)
totalnofsteps <- tapply(dfnoNA$steps, dfnoNA$date, FUN = sum, na.rm = TRUE)
qplot(totalnofsteps, xlab = "Total number of steps taken each day", binwidth=1000)
df[df$steps==0]
df[df$steps==0,]
sum(df[df$steps==0,])
df[df$steps==0,]
df[df$steps==0,]
df[df$steps==0,]
df[dfnoNA$steps==0,]
totalnofsteps
plot(totalnofsteps)
dfnoNA$daytype = factor(c("weekday","weekend"))
head dfnoNA
head (dfnoNA)
dfnoNA$daytype <- factor(c("weekday","weekend"))
head (dfnoNA)
?factor
dfnoNA$daytype <- weekdays(dfnoNA$date)
?weekdays
dfnoNA$daytype <- weekdays(as.date(dfnoNA$date)
)
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date)
)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
df<-read.csv("activity.csv")
getwd()
setwd("/home/raphael/Documents/coursera/RepData_PeerAssessment1/")
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
df<-read.csv("activity.csv")
dfnoNA <- df
for (r in 1:nrow(df)){
if ( is.na(df$steps[r])) {
interval <- df$interval[r]
meanForInterval <- ag$steps[ag$interval == interval]
dfnoNA$steps[r] <- meanForInterval
}
}
ag<-aggregate(x=list(steps=df$steps),by=list(interval=df$interval),FUN=mean,na.rm=TRUE)
dfnoNA <- df
for (r in 1:nrow(df)){
if ( is.na(df$steps[r])) {
interval <- df$interval[r]
meanForInterval <- ag$steps[ag$interval == interval]
dfnoNA$steps[r] <- meanForInterval
}
}
dfnoNA$daytype <- factor(c("weekday","weekend"))
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date))
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date))
Sys.setlocale("LC_TIME", "C")
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date))
View(dfnoNA)
View(dfnoNA)
remove(dfnoNA)
dfnoNA <- df
for (r in 1:nrow(df)){
if ( is.na(df$steps[r])) {
interval <- df$interval[r]
meanForInterval <- ag$steps[ag$interval == interval]
dfnoNA$steps[r] <- meanForInterval
}
}
Sys.setlocale("LC_TIME", "C")
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date))
dfnoNA$daytype <- factor(c("weekday","weekend"))
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date))
remove(dfnoNA)
dfnoNA <- df
for (r in 1:nrow(df)){
if ( is.na(df$steps[r])) {
interval <- df$interval[r]
meanForInterval <- ag$steps[ag$interval == interval]
dfnoNA$steps[r] <- meanForInterval
}
}
dfnoNA$daytype <- factor(c("weekday","weekend"))
dfnoNA$daytype <- weekdays(as.Date(dfnoNA$date))
table(dfnoNA$daytype)
dfnoNA$daytype <- "weekday"
dfnoNA$daytype <- "weekday"
dfnoNA$daytype[dfnoNA$daytype %in% c("Saturday","Sunday")] <- "weekend"
table(dfnoNA$daytype)
dfnoNA$daytype <- "weekday"
dfnoNA$daytype[weekdays(as.Date(dfnoNA$date)) %in% c("Saturday","Sunday")] <- "weekend"
table(dfnoNA$daytype)
factor(table(dfnoNA$daytype)
)
dfnoNA$daytype <- as.factor(dfnoNA$daytype)
table(dfnoNA$daytype)
xyplot(steps ~ interval | daytype, data=dfnoNA)
library(ggplot2)
xyplot(steps ~ interval | daytype, data=dfnoNA)
p1 <-ggplot(data=ag, aes(x = interval, y = steps))+geom_line()
p1
agnoNA<-aggregate(x=list(steps ~ interval + daytype),data=dfnoNA, FUN=mean,na.rm=FALSE)
agnoNA<-aggregate(x=list(steps=dfnoNA$steps),by=list(interval=dfnoNA$interval ),FUN=mean,na.rm=FALSE)
head ag
head(ag)
agnoNA<-aggregate(x=list(steps=dfnoNA$steps),by=list(interval=dfnoNA$interval, dfnoNA$daytype),FUN=mean,na.rm=FALSE)
agnoNA
head(agnoNA)
plot(agnoNA)
ggplot(data=agnoNA[agnoNA], aes(x = interval, y = steps))+geom_line()
ggplot(data=agnoNA, aes(x = interval, y = steps))+geom_line()
ggplot(data=agnoNA[agnoNA$Group.2=="weekday"], aes(x = interval, y = steps))+geom_line()
ggplot(data=agnoNA[agnoNA$Group.2=="weekday",], aes(x = interval, y = steps))+geom_line()
ggplot(data=agnoNA[agnoNA$Group.2=="weekend",], aes(x = interval, y = steps))+geom_line()
agnoNA<-aggregate(x=list(steps=dfnoNA$steps),by=list(interval=dfnoNA$interval, daytype=dfnoNA$daytype),FUN=mean)
plotWeekday <- ggplot(data=agnoNA[agnoNA$daytype=="weekday",], aes(x = interval, y = steps))+geom_line()
plotWeekend <- ggplot(data=agnoNA[agnoNA$daytype=="weekend",], aes(x = interval, y = steps))+geom_line()
multiplot(plotWeekday, plotWeekday, cols=1)
ggplot(data=agnoNA, aes(x = interval, y = steps))+geom_line()+facet_grid(daytype ~ .)
agnoNA<-aggregate(data=dfnoNA, x=list(steps=steps),by=list(interval=interval, daytype=daytype),FUN=mean)
